pipeline {
    agent any
    stages {
        stage('Verificar Repositório') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/teste3']], useRemoteConfigs: [[url: 'https://github.com/dboechatl/cadastro2.git']]])
            }
        }
      
        //stage('Instalar Dependências') {
        //    steps {
        //        script {
        //            env.PATH = "/usr/bin:$PATH"
        //        }
        //        sh 'mvn -v'
		//sh 'mvn clean'
        //    }
        //}
        
        //stage('Análise SonarQube') {
        //   steps {
        //        withSonarQubeEnv('SonarQubeServer') { // Nome da instância configurada no Jenkins
        //            sh """
        //           mvn clean verify sonar:sonar \
        //                -Dsonar.projectKey=cadastro \
        //                -Dsonar.projectName='cadastro'
        //            """
        //        }
        //    }
        //}
        
        //stage('Quality Gate') {
        //    steps {
        //        script {
        //            def qg = waitForQualityGate() // Verifica o Quality Gate
        //            if (qg.status != 'OK') {
        //                error "Quality Gate falhou: ${qg.status}"
        //            }
        //        }
        //    }
        //}
        
        stage('Construir Imagem Docker') {
            steps {
                script {
                    def appName = 'cadastro-app'
                    def imageTag = "${appName}:${env.BUILD_ID}"

                    // Construir a imagem Docker
                    bat "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Fazer Deploy') {
            steps {
                script {
                    def appName = 'cadastro'
                    def imageTag = "${appName}:${env.BUILD_ID}"
                    
                    // Parar e remover o contêiner do próprio aplicativo, se estiver rodando
                    bat "docker ps -a --filter 'name=${appName}' --format '{{.ID}}' | xargs -r docker stop"
                    bat "docker ps -a --filter 'name=${appName}' --format '{{.ID}}' | xargs -r docker rm"
            
                    // Verificar se o contêiner mysql está rodando e remover
                    bat "docker ps -a --filter 'name=mysql' --format '{{.ID}}' | xargs -r docker stop"
                    bat "docker ps -a --filter 'name=mysql' --format '{{.ID}}' | xargs -r docker rm"

                    // Verificar se o contêiner rabbitmq está rodando e remover
                    bat "docker ps -a --filter 'name=rabbitmq' --format '{{.ID}}' | xargs -r docker stop"
                    bat "docker ps -a --filter 'name=rabbitmq' --format '{{.ID}}' | xargs -r docker rm"

                    // Executar o novo container
                    bat "docker-compose up -d --build"
                }
            }
        }
    }
    post {
        success {
            echo 'Deploy realizado com sucesso!'
        }
        failure {
            echo 'Houve um erro durante o deploy.'
        }
    }
}
