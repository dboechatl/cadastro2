pipeline {
    agent any
    stages {
        stage('Verificar Repositório') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/teste3']], useRemoteConfigs: [[url: 'https://github.com/dboechatl/cadastro2.git']]])
            }
        }
      
        stage('Instalar Dependências') {
            steps {
                script {
                    // Atualiza o PATH se necessário
                    env.PATH = "/usr/bin:$PATH"
                    // Instalar as dependências Maven antes de compilar o projeto
                    sh 'mvn clean install'  // Instala as dependências do Maven
                }
            }
        }
        
        //stage('Análise SonarQube') {
        //   steps {
        //        withSonarQubeEnv('SonarQubeServer') { // Nome da instância configurada no Jenkins
        //            sh """
        //           mvn clean verify sonar:sonar \
        //                -Dsonar.projectKey=cadastro \
        //                -Dsonar.projectName='cadastro'
        //            """
        //        }
        //    }
        //}
        
        //stage('Quality Gate') {
        //    steps {
        //        script {
        //            def qg = waitForQualityGate() // Verifica o Quality Gate
        //            if (qg.status != 'OK') {
        //                error "Quality Gate falhou: ${qg.status}"
        //            }
        //        }
        //    }
        //}
        
        stage('Construir Imagem Docker') {
            steps {
                script {
                    def appName = 'cadastro-app'
                    def imageTag = "${appName}:${env.BUILD_ID}"

                    // Construir a imagem Docker
                    bat "docker build -t ${imageTag} ."
                }
            }
        }

        stage('Fazer Deploy') {
            steps {
                script {
                    def appName = 'cadastro'
                    def imageTag = "${appName}:${env.BUILD_ID}"
                    
                    // Parar e remover o container existente, se houver
            		bat "docker stop ${appName} || exit 0"
            		bat "docker rm -v ${appName} || exit 0"  // Remover o container e os volumes associados
            
            		// Parar e remover os containers do mysql e rabbitmq, se estiverem em uso
            		bat "docker stop mysql rabbitmq || exit 0"
            		bat "docker rm -v mysql rabbitmq || exit 0"

                    // Executar o novo container
                    bat "docker-compose up -d --build"
                }
            }
        }
    }
    post {
        success {
            echo 'Deploy realizado com sucesso!'
        }
        failure {
            echo 'Houve um erro durante o deploy.'
        }
    }
}
